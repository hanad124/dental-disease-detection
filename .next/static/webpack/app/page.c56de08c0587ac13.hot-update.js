"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/image.tsx":
/*!*************************!*\
  !*** ./store/image.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useImage: function() { return /* binding */ useImage; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _components_FileReader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/components/FileReader */ \"(app-pages-browser)/./components/FileReader.ts\");\n\n\n\n// Define a set of colors\nconst colors = [\n    \"#FF5733\",\n    \"#33FF57\",\n    \"#3357FF\",\n    \"#FF33A1\",\n    \"#A133FF\",\n    \"#33FFA1\",\n    \"#FF5733\",\n    \"#33FF57\",\n    \"#3357FF\"\n];\nconst jsonApi = {\n    method: \"POST\",\n    url: \"https://detect.roboflow.com/tooth-disease/1?api_key=tAIdURDipgqWJHApslZW&format=json\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    data: \"\"\n};\nconst imageApi = {\n    method: \"POST\",\n    url: \"https://detect.roboflow.com/tooth-disease/1?api_key=tAIdURDipgqWJHApslZW&format=image&stroke=3&labels=on\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    responseType: \"arraybuffer\",\n    data: \"\"\n};\nconst useImage = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set)=>({\n        image: null,\n        chartData: {\n            classes: [],\n            confidences: [],\n            colors: []\n        },\n        explanations: {},\n        loading: false,\n        notImageUrl: false,\n        fetchImage: async (url)=>{\n            set({\n                loading: true\n            });\n            const jsonApiUrl = jsonApi.url + \"&image=\".concat(encodeURIComponent(url));\n            const imageApiUrl = imageApi.url + \"&image=\".concat(encodeURIComponent(url));\n            try {\n                const jsonResponse = await (0,axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                    ...jsonApi,\n                    url: jsonApiUrl\n                });\n                const jsonResponseData = jsonResponse.data;\n                // handle the image response\n                const imageResponse = await (0,axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                    ...imageApi,\n                    url: imageApiUrl\n                });\n                const blob = new Blob([\n                    imageResponse.data\n                ], {\n                    type: \"image/jpeg\"\n                });\n                const imagePath = URL.createObjectURL(blob);\n                const classes = jsonResponseData.predictions.map((pred)=>pred.class);\n                const confidences = jsonResponseData.predictions.map((pred)=>pred.confidence);\n                const colorsAssigned = jsonResponseData.predictions.map((_, index)=>colors[index % colors.length] // Assign a color from the predefined set\n                );\n                set({\n                    image: imagePath,\n                    chartData: {\n                        classes,\n                        confidences,\n                        colors: colorsAssigned\n                    },\n                    loading: false,\n                    notImageUrl: false\n                });\n            } catch (error) {\n                set({\n                    loading: false,\n                    notImageUrl: true\n                });\n            }\n        },\n        fetchImageFile: async (file)=>{\n            set({\n                loading: true\n            });\n            const base64Image = await (0,_components_FileReader__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(file);\n            const jsonApiData = {\n                ...jsonApi,\n                data: JSON.stringify(base64Image)\n            };\n            const imageApiData = {\n                ...imageApi,\n                data: JSON.stringify(base64Image)\n            };\n            try {\n                const jsonResponse = await (0,axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(jsonApiData);\n                const jsonResponseData = jsonResponse.data;\n                const imageResponse = await (0,axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(imageApiData);\n                const blob = new Blob([\n                    imageResponse.data\n                ], {\n                    type: \"image/jpeg\"\n                });\n                const imagePath = URL.createObjectURL(blob);\n                const classes = jsonResponseData.predictions.map((pred)=>pred.class);\n                const confidences = jsonResponseData.predictions.map((pred)=>pred.confidence);\n                const colorsAssigned = jsonResponseData.predictions.map((_, index)=>colors[index % colors.length] // Assign a color from the predefined set\n                );\n                set({\n                    image: imagePath,\n                    chartData: {\n                        classes,\n                        confidences,\n                        colors: colorsAssigned\n                    },\n                    loading: false,\n                    notImageUrl: false\n                });\n            } catch (error) {\n                set({\n                    loading: false,\n                    notImageUrl: false\n                });\n            }\n        },\n        // fetchExplanation: async (disease: string) => {\n        //   try {\n        //     const response = await axios.post('http://localhost:3001/explain', { disease });\n        //     const explanation = response.data.content;\n        //     set((state) => ({\n        //       explanations: { ...state.explanations, [disease]: explanation },\n        //     }));\n        //   } catch (error) {\n        //     console.error(\"Error fetching explanation:\", error);\n        //   }\n        // },\n        fetchExplanation: async (disease)=>{\n            const ws = new WebSocket(\"ws://localhost:3001\");\n            ws.onopen = ()=>{\n                ws.send(JSON.stringify({\n                    disease\n                }));\n            };\n            ws.onmessage = (event)=>{\n                const data = event.data;\n                if (data === \"[DONE]\") {\n                    ws.close();\n                    return;\n                }\n                set((state)=>({\n                        explanations: {\n                            ...state.explanations,\n                            [disease]: (state.explanations[disease] || \"\") + data\n                        }\n                    }));\n            };\n            ws.onerror = (error)=>{\n                console.error(\"Error fetching explanation:\", error);\n                ws.close();\n            };\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/image.tsx\n"));

/***/ })

});